@implements IDisposable
@if(allState.ShowEmployee)
{
    if(ShowMainPage)
    {
        <div class="container-fluid mt-5">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-header">
                            <button class="btn btn-outline-success" @onclick="ShowAddOrUpdateEmployeeButtonClicked">
                                <i class="bi bi-plus-circle-dotted"></i> Add Employee
                            </button>
                        </div>
                        <div class="card-body">
                            <SfGrid DataSource="@Employees">
                                <GridColumns>
                                    <GridColumn HeaderText="Employee Image">
                                        <Template>
                                            @{
                                                var employee = (context as Employee);
                                                <div class=" image">
                                                    <img class="rounded-circle" src="@(string.IsNullOrEmpty(employee!.Photo) ? "../Images/Profile/defaultProfileImage.png" : employee!.Photo)" alt="@employee!.Name" width="80" height="80">
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="@nameof(Employee.CivilId)" HeaderText="Civil ID"></GridColumn>
                                    <GridColumn Field="@nameof(Employee.FileNumber)" HeaderText="File Number"></GridColumn>
                                    <GridColumn Field="@nameof(Employee.Name)" HeaderText="Name"></GridColumn>
                                    <GridColumn Field="@nameof(Employee.TelephoneNumber)" HeaderText="Telephone"></GridColumn>
                                    <GridColumn Field="@nameof(Employee.JobName)" HeaderText="Job Name"></GridColumn>
                                    <GridColumn Field="@nameof(Employee.Branch.Name)" HeaderText="Branch"></GridColumn>
                                    <GridColumn Field="@nameof(Employee.Town.Name)" HeaderText="Town"></GridColumn>
                                    <GridColumn HeaderText="Menu" HeaderTextAlign="TextAlign.Left">
                                        <Template>
                                            @{
                                                var employee = (context as Employee);
                                                <i class="bi bi-menu-down text-primary" id="cursorStyle" @onclick="() => ShowMenuPopUp(employee!)"></i>
                                            }
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                        <div class="card-footer">
                           
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}
<AddOrUpdateEmployeePage @ref="addOrUpdateEmployee"
    Employee="Employee"
    ShowAddOrUpdateEmployee="ShowAddOrUpdatePage" 
    NotifyParentFormCloseClicked="NotifyParentFormCloseClicked"
    Countries="DefaultCountries"
    Cities="SelectedCities"
    Towns="SelectedTowns"
    GeneralDepartments="DefaultGeneralDepartments"
    Departments="SelectedDepartments"
    Branches="SelectedBranches"
    HandleCountrySelectEvent="HandleCountrySelectEvent"
    HandleCitySelectEvent="HandleCitySelectEvent"
    HandleGeneralDepartmentSelectEvent="HandleGeneralDepartmentSelectEvent"
    HandleDepartmentSelectEvent="HandleDepartmentSelectEvent"
    HandleSaveEmployeeClickedEvent="HandleSaveEmployeeClickedEvent" >

</AddOrUpdateEmployeePage>

<EmployeeDetailsPage 
    EmployeeDetails="Employee"
    ShowDetailsPage="ShowDetailsPage"
    HandleDetailsPageCloseBtnClicked="HandleDetailsPageCloseBtnClicked"
/>


<ContextMenu @ref="contextMenu"
    HandleDeleteClicked="DeleteClicked"
    HandleEditClicked="EditClicked"
    HandleViewClicked="ViewClicked"
     HandleAddVacationClicked="AddVacationClicked"
    @*HandleAddOvertimeClicked="AddOvertimeClicked"
    HandleAddSanctionClicked="AddSanctionClicked"
    HandleAddHealthClicked="AddHealthClicked" *@
/>
<DoctorDialog @ref="doctorDialog" Doctor="Doctor" HandleSaveOperationEvent="SaveHealthEvent" />
@code {
    AddOrUpdateEmployeePage? addOrUpdateEmployee;

    public ICollection<Employee> Employees { get; set; } = []; //new List<Employee>();
    public Employee Employee { get; set; } = new();

    // Country / City / Town
    public ICollection<Country> DefaultCountries { get; set; } = [];
    public ICollection<City> DefaultCities { get; set; } = [];
    public ICollection<Town> DefaultTowns { get; set; } = [];

    // General Department / Department / Branch
    public ICollection<GeneralDepartment> DefaultGeneralDepartments { get; set; } = [];
    public ICollection<Department> DefaultDepartments { get; set; } = [];
    public ICollection<Branch> DefaultBranches { get; set; } = [];


    public ICollection<Department> SelectedDepartments { get; set; } = [];
    public ICollection<Branch> SelectedBranches { get; set; } = [];
    public ICollection<City> SelectedCities { get; set; } = [];
    public ICollection<Town> SelectedTowns { get; set; } = [];


    protected async override Task OnInitializedAsync()
    {
        allState.Action += StateHasChanged;
        await LoadDefaults();
        await LoadEmployees();

    }

    // Notify parent when Add or update employee form closes
    private async Task NotifyParentFormCloseClicked()
    {
        ShowMainPage = true;
        ShowAddOrUpdatePage = false;
        SelectedEmployee = new();
        await LoadEmployees();
        await LoadDefaults();
    }
    
    private async Task LoadDefaults()
    {
        DefaultCountries = await countryService.GetAllAsync(Constants.CountryBaseUrl);
        DefaultCities = await cityService.GetAllAsync(Constants.CityBaseUrl);
        DefaultTowns = await townService.GetAllAsync(Constants.TownBaseUrl);

        DefaultGeneralDepartments =  await generalDepartmentSevice.GetAllAsync(Constants.GeneralDepartmentBaseUrl);
        DefaultDepartments = await departmentService.GetAllAsync(Constants.DepartmentBaseUrl);
        DefaultBranches = await branchService.GetAllAsync(Constants.BranchBaseUrl);
    }

    // Country select
    private void HandleCountrySelectEvent(int countryId)
    => SelectedCities = DefaultCities.Where(x => x.CountryId == countryId).ToList();

    // City Select
    private void HandleCitySelectEvent(int cityId)
    => SelectedTowns = DefaultTowns.Where(x => x.CityId == cityId).ToList();

    // General Department select
    private void HandleGeneralDepartmentSelectEvent(int generalDepartmentId)
    => SelectedDepartments = DefaultDepartments.Where(x => x.GeneralDepartmentId == generalDepartmentId).ToList();

    // Department select
    private void HandleDepartmentSelectEvent(int departmentId)
    => SelectedBranches = DefaultBranches.Where(x => x.DepartmentId == departmentId).ToList();

    // Load Employees
    private async Task LoadEmployees()
    => Employees = await employeeService.GetAllAsync(Constants.EmployeeBaseUrl);
    
    // Save Employee
    async Task HandleSaveEmployeeClickedEvent(Employee employee)
    {
        bool successCheck = false;
        if(employee.Id > 0)
        {
            var result = await employeeService.UpdateAsync(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message!);
        }
        else
        {
            var response = await employeeService.InsertAsync(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message!);
        }
        if(successCheck)
            addOrUpdateEmployee!.ClearContent();
        
    }
    public bool ShowMainPage { get; set; } = true;
    public bool ShowAddOrUpdatePage { get; set; } = false;
    
    void ShowAddOrUpdateEmployeeButtonClicked()
    {
        ShowMainPage = false;
        ShowAddOrUpdatePage = true;
    }

    // Context Menu
    // Show Menu Pop Up
    ContextMenu? contextMenu;
    
    public Employee SelectedEmployee { get; set; } = new();
    void ShowMenuPopUp(Employee employee)
    {
        SelectedEmployee = employee;
        contextMenu!.OpenContextMenu();
    }

    // Edit Clicked
    private void EditClicked()
    {
        // EmployeeGrouping1
        addOrUpdateEmployee!.Employee.Id = SelectedEmployee.Id;
        addOrUpdateEmployee!.EmployeeGroup1.Name = SelectedEmployee.Name;
        addOrUpdateEmployee!.EmployeeGroup1.TelephoneNumber = SelectedEmployee.TelephoneNumber;
        addOrUpdateEmployee!.EmployeeGroup1.FileNumber = SelectedEmployee.FileNumber;
        addOrUpdateEmployee!.EmployeeGroup1.Address = SelectedEmployee.Address;
        addOrUpdateEmployee!.EmployeeGroup1.Photo = SelectedEmployee.Photo;
        addOrUpdateEmployee!.EmployeeGroup1.CivilId = SelectedEmployee.CivilId;

        // EmployeeGrouping2
        addOrUpdateEmployee!.EmployeeGroup2.JobName = SelectedEmployee.JobName;
        addOrUpdateEmployee!.EmployeeGroup2.Other = SelectedEmployee.Other!;

        // General Department / Department / Branch
        addOrUpdateEmployee!.GeneralDepartment = SelectedEmployee.Branch!.Department!.GeneralDepartment!.Name!;
        addOrUpdateEmployee!.Department = SelectedEmployee.Branch!.Department!.Name!;
        addOrUpdateEmployee!.Branch = SelectedEmployee.Branch!.Name!;

        // Country / City / Town
        addOrUpdateEmployee!.Country = SelectedEmployee.Town!.City!.Country!.Name!;
        addOrUpdateEmployee!.City = SelectedEmployee.Town!.City!.Name!;
        addOrUpdateEmployee!.Town = SelectedEmployee.Town!.Name!;

        // Title
        addOrUpdateEmployee.Title = "Update";
        SelectedEmployee = new();
        contextMenu!.CloseContextMenu();
        ShowAddOrUpdatePage = true;
        ShowMainPage = false;
    }

    // Delete Clicked
    private async Task DeleteClicked()
    {
        contextMenu!.CloseContextMenu();
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {SelectedEmployee.Name}?", "Alert!");
        if(!confirm) return;
        var response = await employeeService.DeleteAsync(SelectedEmployee.Id, Constants.EmployeeBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message!);
        if(result)
        {
            SelectedEmployee = new();
            await LoadDefaults();
            await LoadEmployees();
        }
    }
   
   // View Clicked
   public bool ShowDetailsPage { get; set; } = false;
   private void ViewClicked()
   {
        Employee = SelectedEmployee;
        contextMenu!.CloseContextMenu();
        ShowDetailsPage = true;
        ShowMainPage = false;
        SelectedEmployee = new();
   }
   
    DoctorDialog? doctorDialog;
    Doctor Doctor = new();
    // Add Health clicked
    private void AddVacationClicked()
    {
        Doctor.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        doctorDialog!.CloseDialog();
    }
    // Save Health Handler
    public async Task SaveHealthEvent(Doctor item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await doctorService.InsertAsync(item, Constants.DoctorBaseUrl);
        var response = await DisplayMessage(flag, message!);
        if(response)
        {
            SelectedEmployee = new();
            Doctor = new();
            doctorDialog!.CloseDialog();
        }

    }

   // Details Employee Close Btn Clicked
   private void HandleDetailsPageCloseBtnClicked()
   {
        ShowDetailsPage = false;
        ShowMainPage = true;
   }
   
    // Display message
    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if(flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }
    public void Dispose() => allState.Action -= StateHasChanged;

}