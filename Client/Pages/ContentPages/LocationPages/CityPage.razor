@implements IDisposable
@if(allState.ShowCity)
{
    <div class="container mt-5">
         <div class="row">
             <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">City</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked"><i class="bi bi-plus-circle-dotted"></i> Add City</button>
                    </div>
                    <div class="card-header">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Country</th>
                                        <th scope="col">City</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                  @if(Cities is not null)
                                  {
                                     int count = 1;
                                     @foreach(var item in Cities)
                                     {
                                        <tr>
                                            <th scope="row">@count</th>
                                            <td>@item.Id</td>
                                            <td>@item.Country!.Name</td>     
                                            <td>@item.Name</td>     
                                            <td>
                                                <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item)"></i>
                                                <i class="bi bi-trash text-danger"  id="cursorStyle"  @onclick="() => DeleteClicked(item)" ></i>
                                                
                                            </td>
                                        </tr>
                                        count++;
                                     }
                                  }
                                  else
                                  {
                                     <tr>
                                        <td colspan="4">
                                            <div class="alert alert-info text-center">
                                                No Department added yet!
                                            </div>
                                        </td>
                                     </tr>
                                  }
                                   
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
             </div>
         </div>
    </div>
}
<style>
    #cursorStyle{
        cursor: pointer;
    }
</style>
<CityDialog @ref="cityDialog" 
HandleSaveOperationEvent="HandleSaveOperationEvent"
City="City"
Countries="Countries" >

</CityDialog>
@code {
    CityDialog? cityDialog;
    public City City { get; set; } = new();
    public ICollection<Country> Countries { get; set; } = new List<Country>();
    public ICollection<City> Cities { get; set; } = new List<City>();
    public string Title { get; set; } = "Add";
    
    protected async override Task OnInitializedAsync()
    {
        await GetCities();
        await GetCountries();
        allState.Action += StateHasChanged;

    }
    
    private async Task GetCities()
    {
        Cities = await cityService.GetAllAsync(Constants.CityBaseUrl);
    }
    private async Task GetCountries()
    {
        Countries = await countryService.GetAllAsync(Constants.CountryBaseUrl);
    }

    void AddButtonClicked()
    {
        cityDialog?.ChangeTitle("Add");
        City = new();
        OpenDialog();
    }
    void EditClicked(City dep)
    {
        cityDialog?.ChangeTitle("Update");
        City = dep;
        OpenDialog();
    }

    private async Task DeleteClicked(City dep)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {dep.Name}?", "Confirm Delete");
        if(!confirm) return;
        var response = await cityService.DeleteAsync(dep.Id, Constants.CityBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message!);
        if(result)
            await GetCities();
    }
    void OpenDialog()
    {
        cityDialog?.OpenDialog();
    }
    public void Dispose() => allState.Action -= StateHasChanged;
    private async Task HandleSaveOperationEvent(City city)
    {
        bool successCheck = false;
        if(city.Id > 0)
        {
            var result = await cityService.UpdateAsync(city, Constants.CityBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message!);
        }
        else
        {
            var response = await cityService.InsertAsync(city, Constants.CityBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message!);
        }
        if(successCheck)
        {
            City = new();
            await GetCities();
            cityDialog?.ChangeTitle("Add");
        }
    }
    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if(flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    } 
}