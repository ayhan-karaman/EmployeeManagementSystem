@implements IDisposable
@if(allState.ShowTown)
{
    <div class="container mt-5">
         <div class="row">
             <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">City</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked"><i class="bi bi-plus-circle-dotted"></i> Add Town</button>
                    </div>
                    <div class="card-header">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">City</th>
                                        <th scope="col">Town</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                  @if(Towns is not null)
                                  {
                                     int count = 1;
                                     @foreach(var item in Towns)
                                     {
                                        <tr>
                                            <th scope="row">@count</th>
                                            <td>@item.Id</td>
                                            <td>@item.City!.Name</td>     
                                            <td>@item.Name</td>     
                                            <td>
                                                <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item)"></i>
                                                <i class="bi bi-trash text-danger"  id="cursorStyle"  @onclick="() => DeleteClicked(item)" ></i>
                                                
                                            </td>
                                        </tr>
                                        count++;
                                     }
                                  }
                                  else
                                  {
                                     <tr>
                                        <td colspan="4">
                                            <div class="alert alert-info text-center">
                                                No Town added yet!
                                            </div>
                                        </td>
                                     </tr>
                                  }
                                   
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
             </div>
         </div>
    </div>
}
<style>
    #cursorStyle{
        cursor: pointer;
    }
</style>
<TownDialog @ref="townDialog" 
HandleSaveOperationEvent="HandleSaveOperationEvent"
Town="Town"
Cities="Cities" >

</TownDialog>
@code {
    TownDialog? townDialog;
    public Town Town { get; set; } = new();
    public ICollection<City> Cities { get; set; } = new List<City>();
    public ICollection<Town> Towns { get; set; } = new List<Town>();
    public string Title { get; set; } = "Add";
    
    protected async override Task OnInitializedAsync()
    {
        await GetTowns();
        await GetCities();
        allState.Action += StateHasChanged;

    }
    
    private async Task GetCities()
    {
        Cities = await cityService.GetAllAsync(Constants.CityBaseUrl);
    }
    private async Task GetTowns()
    {
        Towns = await townService.GetAllAsync(Constants.TownBaseUrl);
    }

    async Task AddButtonClicked()
    {
        townDialog?.ChangeTitle("Add");
        Town = new();
        OpenDialog();
    }
    async Task EditClicked(Town dep)
    {
        townDialog?.ChangeTitle("Update");
        Town = dep;
        await GetCities();
        OpenDialog();
    }

    private async Task DeleteClicked(Town dep)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {dep.Name}?", "Confirm Delete");
        if(!confirm) return;
        var response = await townService.DeleteAsync(dep.Id, Constants.CityBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message!);
        if(result)
            await GetTowns();
    }
    void OpenDialog()
    {
        townDialog?.OpenDialog();
    }
    public void Dispose() => allState.Action -= StateHasChanged;
    private async Task HandleSaveOperationEvent(Town town)
    {
        bool successCheck = false;
        if(town.Id > 0)
        {
            var result = await townService.UpdateAsync(town, Constants.TownBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message!);
        }
        else
        {
            var response = await townService.InsertAsync(town, Constants.TownBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message!);
        }
        if(successCheck)
        {
            Town = new();
            await GetTowns();
            townDialog?.ChangeTitle("Add");
        }
    }
    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if(flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    } 
}