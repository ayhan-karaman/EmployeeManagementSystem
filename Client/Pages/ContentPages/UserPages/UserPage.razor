@implements IDisposable

@if(allState.ShowUser)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Manage Users</h4>
                    </div>
                    <div class="card-header" style="max-height: 580pc; overflow-x:hidden; overflow-y:scroll;">
                         <div class="card-body">
                             <table class="table table-striped">
                                 <thead>
                                     <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Email</th>
                                        <th scope="col">Role</th>
                                        <th scope="col">Action</th>
                                     </tr>
                                 </thead>
                                 <tbody>
                                    @if(ManageUsers is not null)
                                    {
                                        int count = 1;
                                        foreach(var item in ManageUsers)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.UserId</td>
                                                <td>@item.Name</td>
                                                <td>@item.Email</td>
                                                <td>@item.Role</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item)" ></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(item)" ></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4" >
                                                <div  class="alert alert-info text-center">
                                                    No User registered yet!
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                 </tbody>
                             </table>
                         </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<style>
    #cursorStyle{
        cursor: pointer;
    }
</style>
<UserDialog @ref="userDialog"
    ManageUser="ManageUser"
    SystemRoles="SystemRoles"
    HandleSaveOperationEvent="HandleSaveOperationEvent"
></UserDialog>
@code {
    UserDialog? userDialog;
    ManageUser ManageUser = new();
    public ICollection<ManageUser> ManageUsers { get; set; }  = new List<ManageUser>();
    public ICollection<SystemRole> SystemRoles { get; set; }  = new List<SystemRole>();
    
    protected async override Task OnInitializedAsync()
    {
        await GetUsers();
        await GetSystemRoles();
        allState.Action += StateHasChanged;
    }

    async Task GetUsers()
    {
        ManageUsers  = await accountService.GetUsersAsync();
    }
    async Task GetSystemRoles()
    {
        SystemRoles = await accountService.GetSystemRolesAsync();
    }

    void OpenDialog()
    {
        userDialog?.OpenDialog();
    }
   
    private async Task HandleSaveOperationEvent(ManageUser manageUser)
    {
        var result = await accountService.UpdateUserAsync(manageUser);
        bool successCheck = await DisplayMessage(result.Flag, result.Message!);
        if(successCheck)
        {
            ManageUser = new();
            await GetUsers();
        }
    }

    public void EditClicked(ManageUser user)
    {
        ManageUser = user;
        OpenDialog();
    }

    private async Task DeleteClicked(ManageUser user)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {user.Name}?", "Alert!");
        if(!confirm) return;
        var response = await accountService.DeleteUserAsync(user.UserId);
        var result = await DisplayMessage(response.Flag, response.Message!);
        if(result)
            await GetUsers();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
         if(flag)
         {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
         }
         else
         {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
         }
    }
    public void Dispose() => allState.Action -= StateHasChanged;
    
}