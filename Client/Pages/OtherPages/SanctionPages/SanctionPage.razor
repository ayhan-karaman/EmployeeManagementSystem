@implements IDisposable

@if(allState.ShowSanction)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-warning shadow-lg">
                    <div class="card-header"><h4 class="float-start">Manage Employees Sanction</h4></div>
                    <div class="card-header" style="max-height: 580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            @{
                                var Tool = (new List<string>(){ "Search", "ExcelExport", "PdfExport", "Print"});
                            }
                            <SfGrid DataSource="@Sanctions" AllowPaging="true" AllowSorting="true" 
                            Toolbar="@Tool" AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true"  >
                                <GridPageSettings PageSize="5"></GridPageSettings>
                                <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Sanction"></GridEvents>
                                <GridColumns>
                                    <GridColumn Field="@nameof(Sanction.EmployeeId)" HeaderText="ID"></GridColumn>
                                    <GridColumn HeaderText="Type">
                                        <Template>
                                            @{
                                                var item = (context as Sanction);
                                            }
                                            <div>
                                                @item!.SanctionType!.Name
                                            </div>
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="@nameof(Sanction.Date)" HeaderText="Occuring Date"></GridColumn>
                                    <GridColumn Field="@nameof(Sanction.Punishment)" HeaderText="Punishment"></GridColumn>
                                    <GridColumn Field="@nameof(Sanction.PunishmentDate)" HeaderText="Punishment Date"></GridColumn>
                                    
                                    <GridColumn HeaderText="Action">
                                        <Template>
                                            @{
                                                var item = (context as Sanction);
                                            }
                                            <div>
                                                <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item!)" ></i>
                                                <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(item!)" ></i>
                                            </div>
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<SanctionDialog 
    @ref="sanctionDialog"
    Sanction="Sanction"
    SanctionTypes="SanctionTypes"
    HandleSaveOperationEvent="HandleSaveOperationEvent"
/>
@code {
    private SfGrid<Sanction>? DefaultGrid;
    SanctionDialog? sanctionDialog;
    Sanction Sanction = new();
    public ICollection<Sanction> Sanctions { get; set; } = new List<Sanction>();
    public ICollection<SanctionType> SanctionTypes { get; set; } = new List<SanctionType>();

    protected async override Task OnInitializedAsync()
    {
        await GetTypes();
        await GetSanctions();
        allState.Action += StateHasChanged;
    }

    private async Task GetTypes() => SanctionTypes =  await sanctionTypeService.GetAllAsync(Constants.SanctionTypeBaseUrl);
    private async Task GetSanctions() => Sanctions =  await sanctionService.GetAllAsync(Constants.SanctionBaseUrl);

    private async Task HandleSaveOperationEvent(Sanction item)
    {
      
        var result = await sanctionService.UpdateAsync(item, Constants.SanctionBaseUrl);
        bool successCheck = await DisplayMessage(result.Flag, result.Message!);
        if(successCheck)
        {
            Sanction = new();
            await GetSanctions();
        }
    }

     private void EditClicked(Sanction item)
     {
        Sanction = item;
        OpenDialog();
     }

     private async Task DeleteClicked(Sanction item)
     {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete this?", "Confirm Delete");
        if(!confirm) return;
        var response = await sanctionService.DeleteAsync(item.EmployeeId, Constants.SanctionBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message!);
        if(result)
            await GetSanctions();
     }
    public void OpenDialog() => sanctionDialog!.OpenDialog();
    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if(flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    } 

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if(args.Item.Text == "Excel Export")
            await this.DefaultGrid!.ExcelExport()!;
        if(args.Item.Text == "PDF Export")
            await this.DefaultGrid!.PdfExport()!;
    }
    public void Dispose() => allState.Action -= StateHasChanged;
}