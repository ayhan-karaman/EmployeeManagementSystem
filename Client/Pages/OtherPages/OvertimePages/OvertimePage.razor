@if(allState.ShowOvertime)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-warning shadow-lg">
                    <div class="card-header"><h4 class="float-start">Healt Information</h4></div>
                    <div class="card-header" style="max-height: 580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            @{
                                var Tool = (new List<string>(){ "Search", "ExcelExport", "PDFExport", "Print"});
                            }
                            <SfGrid DataSource="@Overtimes" AllowPaging="true" AllowSorting="true" 
                            Toolbar="@Tool" AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true"  >
                                <GridPageSettings PageSize="5"></GridPageSettings>
                                <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Overtime"></GridEvents>
                                <GridColumns>
                                    <GridColumn Field="@nameof(Overtime.EmployeeId)" HeaderText="ID"></GridColumn>
                                    <GridColumn HeaderText="Type">
                                        <Template>
                                            @{
                                                var overtime = (context as Overtime);
                                            }
                                            <div>
                                                @overtime!.OvertimeType!.Name
                                            </div>
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="@nameof(Overtime.StartDate)" HeaderText="Start Date"></GridColumn>
                                    <GridColumn Field="@nameof(Overtime.EndDate)" HeaderText="End Date"></GridColumn>
                                    <GridColumn Field="@nameof(Overtime.NumberOfDays)" HeaderText="Number of Days"></GridColumn>
                                    
                                    <GridColumn HeaderText="Action">
                                        <Template>
                                            @{
                                                var overtime = (context as Overtime);
                                            }
                                            <div>
                                                <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(overtime!)" ></i>
                                                <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(overtime!)" ></i>
                                            </div>
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<OvertimeDialog 
    @ref="overtimeDialog"
    Overtime="Overtime"
    OvertimeTypes="OvertimeTypes"
    HandleSaveOperationEvent="HandleSaveOperationEvent"
/>
@code {
    private SfGrid<Overtime>? DefaultGrid;
    OvertimeDialog? overtimeDialog;
    Overtime Overtime = new();
    public List<Overtime> Overtimes { get; set; } = new();
    public List<OvertimeType> OvertimeTypes { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetTypes();
        await GetOvertimes();
        allState.Action += StateHasChanged;
    }

    private async Task GetTypes() => await overtimeTypeService.GetAllAsync(Constants.OvertimeTypeBaseUrl);
    private async Task GetOvertimes() => await overtimeService.GetAllAsync(Constants.OvertimeBaseUrl);

    private async Task HandleSaveOperationEvent(Overtime overtime)
    {
      
        var result = await overtimeService.UpdateAsync(overtime, Constants.OvertimeBaseUrl);
        bool successCheck = await DisplayMessage(result.Flag, result.Message!);
        if(successCheck)
        {
            Overtime = new();
            await GetOvertimes();
        }
    }

     private void EditClicked(Overtime overtime)
     {
        Overtime = overtime;
        OpenDialog();
     }

     private async Task DeleteClicked(Overtime item)
     {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete this?", "Confirm Delete");
        if(!confirm) return;
        var response = await overtimeService.DeleteAsync(item.EmployeeId, Constants.OvertimeBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message!);
        if(result)
            await GetOvertimes();
     }
    public void OpenDialog() => overtimeDialog!.OpenDialog();
    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if(flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    } 

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if(args.Item.Text == "Excel Export")
            await this.DefaultGrid!.ExcelExport()!;
        if(args.Item.Text == "PDF Export")
            await this.DefaultGrid!.PdfExport()!;
    }
    public void Dispose() => allState.Action -= StateHasChanged;
}